Index: src/serverapp/models/Conversation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package serverapp.models;\n\nimport serverapp.controllers.ServerController;\n\nimport java.io.*;\nimport java.net.Socket;\n\npublic class Conversation extends Thread {\n    private Socket socket;\n    private int numeroClient;\n    private ServerController server;\n    /**\n     * Tout le code ci-dessous s'éxécute de manière indépandante du reste du code.\n     */\n    public Conversation (Socket socket, int num, ServerController server){\n        // super(); Utility ???\n        this.socket = socket; // Permet de communiquer avec le client.\n        this.numeroClient = num;\n        this.server = server;\n    }\n    @Override\n    public void run() {\n        // Code de la conversation.\n        try {\n            //InputStream is = socket.getInputStream(); // Octets\n            //InputStreamReader isr = new InputStreamReader(is); // Octets qui forment un charactères\n            //BufferedReader br = new BufferedReader(isr); // caractères qui forment une phrase, pas de limite.\n            BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n            //OutputStream os = socket.getOutputStream();\n            //PrintWriter pw = new PrintWriter(os, true); // true permet d'envoyer la donnée.\n            PrintWriter pw = new PrintWriter(socket.getOutputStream(), true);\n\n            // Quand est ce que cette opération se fait :\n            // On récupère l'adresse IP du client.\n            String IP = socket.getRemoteSocketAddress().toString();\n            // Les adresses seront récupérées dans un log, on pourra savoir quelles machines se sont connectées.\n\n            System.out.println(\"Connection du client numero \" + numeroClient + \" IP= \" +IP);\n            pw.println(\"Bienvenue, vous etes le client : \" + numeroClient); // Le serveur envoit au Client.\n\n            // Conversation (Requête-Réponse), toute la conversation se fait avec la même socket pour cahque client.\n\n            while(true){\n                String req;\n                while((req= br.readLine()) != null){\n                    String[] t = req.split(\"-\");  // séparer le message des destinataires\n                    if (t.length == 2) {\n                        String message = t[0];\n                        String[] t2 = t[1].replace(\" \", \"\").split(\",\");  // séparer les destinataires\n                        //System.out.println(\"J'imprime la longueur de la liste: \" + t2.length);\n                        int[] numeroClients = new int[t2.length];\n                        for(int i=0; i<t2.length; i++){\n                            //System.out.println(\"J'imprime les éléments de la liste à l'index: \" + i + \": t2[i] \" + t2[i]);\n                            numeroClients[i] = Integer.parseInt(t2[i]); // \" 1\"\n                        }\n                        server.broadCast(message, numeroClients); // envoie le message au destinataire spécifiés\n                    }\n                    else {\n                        int[] source = new int[] {numeroClient};\n                        server.broadCast(\"ERROR\", source);\n                    }\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Socket getSocket() {\n        return socket;\n    }\n    public int getNumeroClient() {\n        return numeroClient;\n    }\n\n    public ServerController getServer() {\n        return server;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/serverapp/models/Conversation.java b/src/serverapp/models/Conversation.java
--- a/src/serverapp/models/Conversation.java	(revision db67f6e9f4208b44b2fef550bcc3bde5b71fc480)
+++ b/src/serverapp/models/Conversation.java	(date 1639826213188)
@@ -40,7 +40,6 @@
             pw.println("Bienvenue, vous etes le client : " + numeroClient); // Le serveur envoit au Client.
 
             // Conversation (Requête-Réponse), toute la conversation se fait avec la même socket pour cahque client.
-
             while(true){
                 String req;
                 while((req= br.readLine()) != null){
@@ -56,6 +55,9 @@
                         }
                         server.broadCast(message, numeroClients); // envoie le message au destinataire spécifiés
                     }
+                    else if ("exit".equalsIgnoreCase(br.readLine())){
+                        socket.close();
+                    }
                     else {
                         int[] source = new int[] {numeroClient};
                         server.broadCast("ERROR", source);
